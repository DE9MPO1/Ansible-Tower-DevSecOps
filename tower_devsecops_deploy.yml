---
- name: Configure Tower for JuiceShop Demo
  hosts: localhost
  connection: local
  become: false
  gather_facts: false

  collections:
   - ansible.tower

  tasks:
  - name: Configure Tower Settings
    tower_settings:
      settings:
        PRIMARY_GALAXY_URL: "{{ pri_galaxy_url }}"
        PRIMARY_GALAXY_TOKEN: "{{ pri_galaxy_token }}"
        PRIMARY_GALAXY_AUTH_URL: "{{ pri_galaxy_auth_url }}"
    no_log: true
    tags:
      - tower-config
      - tower-settings

  - name: Create {{ tower_organization }} Organisation
    tower_organization:
      name: "{{ tower_organization }}"
      description: Juice Shop Ltd Organisation
      state: present
    tags:
      - tower-config
      - create-org

  - name: Create AWS credential
    tower_credential:
      name: AWS Credentials
      description: JuiceShop AWS Credentials
      kind: aws
      organization: "{{ tower_organization }}"
      username: "{{ aws_username }}"
      password: "{{ aws_password }}"
      state: present
    tags:
      - tower-config
      - aws-cred

  - name: Fetch EC2 private key
    slurp:
      src: "{{ aws_pvt_key }}"
    register: aws_ssh_key
    tags:
      - tower-config
      - ec2-cred

  - name: Create EC2 Instance credential
    tower_credential:
      name: EC2 Instance Credential
      description: JuiceShop EC2 Credentials
      credential_type: Machine
      organization: "{{ tower_organization }}"
      inputs:
        username: "{{ aws_ssh_user }}"
        ssh_key_data: "{{ aws_ssh_key['content'] | b64decode }}"
    tags:
      - tower-config
      - ec2-cred

  - name: Fetch Demo VM SSH Key
    slurp:
      src: "{{ demo_ssh_pvt_key_file }}"
    register: demo_ssh_pvt_key
    tags:
      - tower-config
      - ssh-cred

  - name: Create Demo VM SSH Credential
    tower_credential:
      name: VM SSH Credential
      description: JuiceShop VM SSH Credential
      credential_type: Machine
      organization: "{{ tower_organization }}"
      inputs:
        username: "{{ demo_ssh_key_username }}"
        ssh_key_data: "{{ demo_ssh_pvt_key['content'] | b64decode }}"
    tags:
      - tower-config
      - ssh-cred

  - name: Create F5 Credential Type
    tower_credential_type:
      name: f5
      description: F5 BigIP Credential
      kind: cloud
      inputs: "{{ lookup('file', 'tower_cred_inputs_f5.json') }}"
      injectors: "{{ lookup('file', 'tower_cred_inputs_f5_injectors.json') }}"
    tags:
      - tower-config
      - f5-cred

  - name: Create F5 Credential  
    tower_credential:
      name: BigIP Credential
      description: BIGIP Credential
      credential_type: f5
      organization: "{{ tower_organization }}"
      inputs:
        user: "{{ f5_user }}"
        password: "{{ f5_password }}"
    tags:
      - tower-config
      - f5-cred  
  
  - name: Fetch GitHub Key
    slurp:
      src: "{{ github_pvt_key }}"
    register: github_pvt_key_out
    tags:
      - tower-config
      - github-cred

  - name: Create GitHub Credential
    tower_credential:
      organization: "{{ tower_organization }}"
      name: GitHub Credential
      description: JuiceShop GitHub Credential
      credential_type: Source Control
      inputs:
        ssh_key_data: "{{ github_pvt_key_out['content'] | b64decode }}"
        username: craig-br
    tags:
      - tower-config
      - github-cred

  - name: Create RHSM Credential Type
    tower_credential_type:
      name: rhsm
      description: RHSM Credentials
      kind: cloud
      inputs: "{{ lookup('file', 'tower_cred_inputs_rhsm.json') }}"
      injectors: "{{ lookup('file', 'tower_cred_inputs_rhsm_injectors.json') }}"
    tags:
      - tower-config
      - rhsm-cred

  - name: Create RHSM Credential
    tower_credential:
      organization: "{{ tower_organization }}"
      name: RHSM
      description: JuiceShop RHSM Credentials
      credential_type: rhsm
      inputs:
        rhsm_username: "{{ rhsm_username }}"
        rhsm_password: "{{ rhsm_password }}"
    tags:
      - tower-config
      - rhsm-cred

  - name: Create Project
    tower_project:
      name: JuiceShop Project
      organization: "{{ tower_organization }}"
      allow_override: true
      description: JuiceShop Playbooks
      scm_branch: master
      scm_clean: true
      scm_credential: GitHub Credential
      scm_type: git
      scm_url: "{{ github_scm_url }}"
    tags:
      - tower-config
      - git-project


  - name: Create AWS Inventory
    tower_inventory:
      name: AWS Inventory
      description: JuiceShop AWS Instances
      organization: "{{ tower_organization }}"
    tags:
      - tower-config
      - aws-inv    

  - name: AWS Inventory Source
    tower_inventory_source:
      name: AWS Source
      description: JuiceShop AWS Source
      inventory: AWS Inventory
      credential: AWS Credentials
      overwrite: True
      overwrite_vars: true
      instance_filters: "tag:function=webserver"
      source: ec2
      update_on_launch: false
    tags:
      - tower-config
      - aws-inv 

  - name: Create Tower Vagrant Inventory
    tower_inventory:
      name: "On Prem Inventory"
      description: JuiceShop On-Prem Instances
      organization: "{{ tower_organization }}"
    tags:
      - tower-config
      - vagrant-inv

  - tower_host:
      inventory: On Prem Inventory
      name: "{{ item.name }}"
      new_name: "{{ item.name }}"
      description: "{{ item.description }}"
      variables: "{{ item.variables }}"
    loop: "{{ vagrant_inv_vars }}"
    tags:
      - tower-config
      - vagrant-inv
  ## Users
  - name: Create Jenkins user
    tower_user:
      username: "{{ jenkins_user }}"
      password: "{{ jenkins_pwd }}"
      email: jenkins@vagrant.local
    tags:
      - tower-config
      - user-jenkins

  - name: Give Jenkins user access to JuiceShop Org
    tower_role:
      user: "{{ jenkins_user }}"
      role: member
      organization: "{{ tower_organization }}"
      state: present
    tags:
      - tower-config
      - user-jenkins

  - name: Give Jenkins user access to SSH key
    tower_role:
      user: "{{ jenkins_user }}"
      role: read
      credential: "VM SSH Credential"
      organization: "{{ tower_organization }}"
      state: present
    tags:
      - tower-config
      - user-jenkins

  - name: Give Jenkins user access to Job Templates
    tower_role:
      user: "{{ jenkins_user }}"
      role: execute
      workflow: "Cloud Instances Workflow"
      state: present
    tags:
      - tower-config
      - user-jenkins
  - tower_role:
      user: "{{ jenkins_user }}"
      role: execute
      job_template: "Deploy JuiceShop App"
      state: present
    tags:
      - tower-config
      - user-jenkins
  - tower_role:
      user: "{{ jenkins_user }}"
      role: execute
      job_template: "Create JuiceShop App VS"
      state: present
    tags:
      - tower-config
      - user-jenkins

  - name: Give Jenkins user access to Inventories
    tower_role:
      user: "{{ jenkins_user }}"
      role: use
      inventory: "AWS Inventory"
      state: present
    tags:
      - tower-config
      - user-jenkins

  ## Job Templates:
  - name: Create Cloud Instances Workflow
    tower_workflow_job_template:
      name: Cloud Instances Workflow
      new_name: Cloud Instances Workflow
      description: Deploy JuiceShop Cloud Instances
      organization: "{{ tower_organization }}"
      inventory: AWS Inventory
      # extra_vars: "{{ [ec2_vars] + [rhsm_vars] }}"
      # extra_vars: "{{ rhsm_vars | combine(ec2_vars) }}"
    tags:
      - tower-config
      - workflow-cloud-instances

  - name: Create Job Templates
    tower_job_template:
      name: "{{ item.name }}"
      job_type: "{{ item.job_type| default ('run')  }}"
      playbook: "{{ item.playbook }}"
      project: "{{ item.project | default ('JuiceShop Project') }}"
      credentials:  "{{ item.credentials | default ('AWS Credentials') }}"
      description: "{{ item.description }}"
      inventory: "{{ item.inventory | default ('AWS Inventory') }}"
      concurrent_jobs_enabled: "{{ item.concurrent_jobs_enabled | default('false') }}"
      become_enabled: "{{ item.become_enabled | default('false') }}"
      ask_limit_on_launch: "{{ item.ask_limit_on_launch | default('false') }}"
      extra_vars: "{{ item.extra_vars | default({}) }}"
      limit: "{{ item.limit | default('') }}"
      use_fact_cache: "{{ item.use_fact_cache | default('false') }}"
      verbosity: "{{ item.verbosity | default('0') }}"
    loop: "{{ job_template_vars }}"
    tags:
      - tower-config
      - job-templates
  
  - name: Add Job Templates to Cloud Instance Workflow
    tower_workflow_job_template_node:
      identifier: "{{ item.identifier }}"
      workflow: "{{ item.workflow | default('Cloud Instances Workflow')}}"
      organization: "{{ tower_organization }}"
      unified_job_template: "{{ item.name }}"
      success_nodes: "{{ item.success_nodes | default({}) }}"
    loop: "{{ workflow_cloud_inst_vars }}"
    tags:
      - tower-config
      - workflow-cloud-templates

# Perform actions on adminservers
- name: Perform commands on Admin Servers
  hosts: adminservers
  gather_facts: false
  become: false

  tasks:
  - name: Copy Vagrant inventory to AdminServers
    copy:
      src: "{{ vagrant_inv_src }}"
      dest: "/tmp/{{ vagrant_inv_dest }}"
    tags:
      - tower-config
      # - vagrant-inv

  - name: Import Vagrant inventory to AdminServers
    command: > 
      awx-manage inventory_import --source=/tmp/vagrant_ansible_inventory --inventory-name="On Prem Inventory" --keep-vars
    become: true
    tags:
      - tower-config
      # - vagrant-inv