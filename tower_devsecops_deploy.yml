---
- name: Configure Tower for JuiceShop Demo

  hosts: localhost
  connection: local
  become: false
  gather_facts: false

  collections:
   - ansible.tower

  tasks:
  - name: Configure Tower Settings
    tower_settings:
      settings:
        PRIMARY_GALAXY_URL: "{{ pri_galaxy_url }}"
        PRIMARY_GALAXY_TOKEN: "{{ pri_galaxy_token }}"
        PRIMARY_GALAXY_AUTH_URL: "{{ pri_galaxy_auth_url }}"
    no_log: true
    tags:
      - tower-config
      - tower-settings

  - name: Create {{ tower_organization }} Organisation
    tower_organization:
      name: "{{ tower_organization }}"
      description: Juice Shop Ltd Organisation
      state: present
    tags:
      - tower-config
      - create-org

  - name: Create AWS credential
    tower_credential:
      name: AWS Credentials
      description: JuiceShop AWS Credentials
      kind: aws
      organization: "{{ tower_organization }}"
      username: "{{ aws_username }}"
      password: "{{ aws_password }}"
      state: present
    tags:
      - tower-config
      - aws-cred

  - name: Fetch EC2 private key
    slurp:
      src: "{{ aws_pvt_key }}"
    register: aws_ssh_key

  - name: Create EC2 Instance credential
    tower_credential:
      name: EC2 Instance Credential
      description: JuiceShop EC2 Credentials
      credential_type: Machine
      organization: "{{ tower_organization }}"
      inputs:
        ssh_key_data: "{{ aws_ssh_key['content'] | b64decode }}"
    tags:
      - tower-config
      - ec2-cred

  - name: Create Demo VM SSH Credential
    tower_credential:
      name: VM SSH Credential
      description: JuiceShop VM SSH Credential
      credential_type: Machine
      organization: "{{ tower_organization }}"
      inputs:
        ssh_key_data: "{{ aws_ssh_key['content'] | b64decode }}"
    tags:
      - tower-config
      - ssh-cred

  - name: Create F5 Credential Type
    tower_credential_type:
      name: f5
      description: F5 BigIP Credential
      kind: cloud
      inputs: "{{ lookup('file', 'tower_cred_inputs_f5.json') }}"
    tags:
      - tower-config
      - f5-cred-type

  - name: Create F5 Credential  
    tower_credential:
      name: BigIP Credential
      description: BIGIP Credential
      credential_type: f5
      organization: "{{ tower_organization }}"
      inputs:
        user: "{{ f5_user }}"
        password: "{{ f5_password }}"
    tags:
      - tower-config
      - f5-cred  
  
  - name: Fetch GitHub Key
    slurp:
      src: "{{ github_pvt_key }}"
    register: github_pvt_key_out
    tags:
      - tower-config
      - github-cred

  - name: Create GitHub Credential
    tower_credential:
      organization: "{{ tower_organization }}"
      name: GitHub Credential
      description: JuiceShop GitHub Credential
      credential_type: Source Control
      inputs:
        ssh_key_data: "{{ github_pvt_key_out['content'] | b64decode }}"
        username: craig-br
    tags:
      - tower-config
      - github-cred

  - name: Create Project
    tower_project:
      name: JuiceShop Project
      organization: "{{ tower_organization }}"
      allow_override: true
      description: JuiceShop Playbooks
      scm_branch: master
      scm_clean: true
      scm_credential: GitHub Credential
      scm_type: git
      scm_url: "{{ github_scm_url }}"
    tags:
      - tower-config
      - git-project


  - name: Create AWS Inventory
    tower_inventory:
      name: AWS Inventory
      description: JuiceShop AWS Instances
      organization: "{{ tower_organization }}"
    tags:
      - tower-config
      - aws-inv    

  - name: AWS Inventory Source
    tower_inventory_source:
      name: AWS Source
      description: JuiceShop AWS Source
      inventory: AWS Inventory
      credential: AWS Credentials
      overwrite: True
      source: ec2
      update_on_launch: false
    tags:
      - tower-config
      - aws-inv 

  - name: Copy Vagrant inventory to AdminServers
    synchronize:
      src: "{{ vagrant_inv_src }}"
      dest: "/tmp/{{ vagrant_inv_dest }}"
    delegate_to: "{{ item }}"
    loop: "{{ query('inventory_hostnames', 'adminservers') }}"
    tags:
      - tower-config
      - vagrant-inv

  - name: Import Vagrant inventory to tower
    command: >
      awx-manage
    become: true

  ## Job Templates:
  - name: Create Cloud Instances Workflow
    tower_workflow_job_template:
      name: Cloud Instances Workflow
      new_name: Cloud Instances Workflow
      description: Deploy JuiceShop Cloud Instances
      organization: "{{ tower_organization }}"
      inventory: AWS Inventory
      extra_vars: "{{ ec2_vars }}"
    tags:
      - tower-config
      - workflow-cloud-instances

  - name: debug template vars
    debug:
      msg: '{{ ansible_hostname }}'
    # loop: "{{ job_template_vars }}"
    delegate_to: adminservers
    delegate_facts: true
    # loop: "{{ groups['adminservers'] }}"
    tags:
      - copy-inv


  - name: Create Job Templates
    tower_job_template:
      name: "{{ item.name }}"
      job_type: "{{ item.job_type| default ('run')  }}"
      playbook: "{{ item.playbook }}"
      project: "{{ item.project | default ('JuiceShop Project') }}"
      credentials:  "{{ item.credentials | default ('AWS Credentials') }}"
      description: "{{ item.description }}"
      inventory: "{{ item.inventory | default ('AWS Inventory') }}"
      concurrent_jobs_enabled: "{{ item.concurrent_jobs_enabled | default('false') }}"
      become_enabled: "{{ item.become_enabled | default('false') }}"
    loop: "{{ job_template_vars }}"
    tags:
      - tower-config
      - job-templates
  
  - name: Add Job Templates to Cloud Instance Workflow
    tower_workflow_job_template_node:
      identifier: "{{ item.identifier }}"
      workflow: "{{ item.workflow | default('Cloud Instances Workflow')}}"
      organization: "{{ tower_organization }}"
      unified_job_template: "{{ item.name }}"
      success_nodes: "{{ item.success_nodes | default([])}}"
    loop: "{{ workflow_cloud_inst_vars }}"
    tags:
      - tower-config
      - workflow-cloud-templates

# - hosts: adminservers
#   gather_facts: false
#   become: false

#   tasks:
#   - name: Copy Vagrant inventory to AdminServers
#     copy:
#       # mode: pull
#       src: "{{ vagrant_inv }}"
#       dest: "/tmp/vagrant_ansible_inventory"
#     tags:
#       - tower-config
      - vagrant-inv-admin
  # - name: Create {{ tower_insights_cred_name }}
  #   tower_credential:
  #     name: "{{ tower_insights_cred_name }}"
  #     description: Craig Insights Credentials for Insghts Demo
  #     kind: insights
  #     organization: "{{ tower_organization }}"
  #     username: "{{ insights_cred_user }}"
  #     password: "{{ insights_cred_password }}"
  #     user: admin
  #     state: present


 
  # - name: Create "{{ tower_insights_inv_name }}"
  #   tower_inventory:
  #     name: "{{ tower_insights_inv_name }}"
  #     description: Craig Insights Inventory
  #     state: present
  #     tower_host: "{{ tower_host }}"
  #     organization: "{{ tower_organization }}"
  #     tower_username: "{{ tower_username }}"
  #     tower_password: "{{ tower_password }}"
  #     validate_certs: false
  #   tags:
  #     - tower-config
  #     - insights-inventory

  # - name: Create and Update "{{ tower_insights_inv_name }}"
  #   command: >
  #     tower-cli inventory create
  #     --name "{{ tower_insights_inv_name }}"
  #     --description "Insights Demo Inventory"
  #     --insights-credential "{{ tower_insights_cred_name }}"
  #     --tower-username "{{ tower_username }}" 
  #     --tower-password "{{ tower_password }}" 
  #     --organization "{{ tower_organization }}"
  #     --tower-host "{{ tower_host }}"
  #     --insecure
  #   no_log: true
  #   tags:
  #     - tower-config
  #     - insights-create-inv
  
  # - name: Create {{ tower_insights_inv_name }} Source
  #   tower_inventory_source:
  #     name: Insights RHV Inventory Source
  #     description: Insights RHV Inventory Source
  #     state: present
  #     tower_host: "{{ tower_host }}"
  #     tower_username: "{{ tower_username }}"
  #     tower_password: "{{ tower_password }}"
  #     credential: RHV Credential
  #     source: rhv
  #     inventory: "{{ tower_insights_inv_name }}"
  #     overwrite: true
  #     validate_certs: false
  #   tags:
  #     - tower-config
  #     - insights-inv-source

  # - name: Update {{ tower_insights_inv_name }}
  #   command: > 
  #     tower-cli inventory batch_update
  #     --name "{{ tower_insights_inv_name }}"
  #     --tower-username "{{ tower_username }}" 
  #     --tower-password "{{ tower_password }}" 
  #     --organization "{{ tower_organization }}"
  #     --tower-host "{{ tower_host }}"
  #     --insecure
  #     --description-on
  #   no_log: true
  #   tags:
  #     - tower-config
  #     - insights-inv-update


        #- name: Create Insights Project
        #tower_project:
        # name: "Insights Project"
        #state: present
        #description: Ansible Tower Insights Integration Project
        #organization: "{{ tower_organization }}"
        #scm_credential: "{{ tower_insights_cred_name }}"
        #scm_type: insights
  
 